on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        description: The hosted runner to use.
        default: windows-latest
      name:
        type: string
        description: The name of the workflow to call.
        required: true
      submodules:
        type: boolean
        description: Whether or not to checkout submodules.
        default: false
      dotnet-version:
        type: string
        description: The version of dotnet to use.
        default: 8.0.x
      install-workload:
        type: string
        description: The name of the workload to install.
        required: false
        default: ''
      jdk-version:
        type: string
        description: The version of the OpenJdk SDK to use.
        required: false
        default: ''
      uno-check:
        type: boolean
        description: Whether or not to ensure that the host has all of the Uno prerequisites.
        default: false
        required: false
      uno-check-version:
        type: string
        description: The version of Uno Check to use.
        default: 1.19.0
        required: false
      uno-check-manifest:
        type: string
        description: An override to the manifest to use.
        default: ''
        required: false
      uno-check-parameters:
        type: string
        description: The parameters to pass to the Uno Check command.
        default: ''
        required: false
      windows-sdk-version:
        type: string
        description: The version of the Windows SDK to use.
        required: false
        default: ''
      vs-version:
        type: string
        description: The version of Visual Studio to use.
        required: false
      vs-prerelease:
        type: boolean
        description: Whether to use a prerelease version of Visual Studio.
        required: false
        default: false
      solution-path:
        type: string
        description: The path to the solution or project to build.
        required: false
        default: ''
      build-configuration:
        type: string
        description: The build configuration to use.
        default: Release
        required: false
      build-args:
        type: string
        description: The arguments to pass to the build.
        required: false
        default: ''
      run-tests:
        type: boolean
        description: Whether to run the tests or not.
        default: true
        required: false
      dotnet-test-logger:
        type: string
        required: false
        default: GitHubActions
      test-result-path:
        type: string
        description: The path to the test results.
        default: ./TestResults/*.trx
        required: false
      code-sign:
        type: boolean
        description: Whether to code sign the build or not.
        default: false
        required: false
      artifacts-path:
        type: string
        description: The path to the artifacts.
        default: ./Artifacts/
        required: false
      artifact-name:
        type: string
        description: The name of the artifact.
        default: NuGet
      nugetFeedUrl:
        type: string
        description: Url of a Private NuGet feed.
        required: false
        default: ''
    secrets:
      nugetUserName:
        description: The username to use to access the NuGet feed.
        required: false
      nugetToken:
        description: The token to use to access the NuGet feed.
        required: false
      codeSignTimestampUrl:
        description: The url to the timestamp server.
        required: false
      codeSignKeyVault:
        description: The name of the Azure KeyVault to use.
        required: false
      codeSignClientId:
        description: The client id to use to access the KeyVault.
        required: false
      codeSignTenantId:
        description: The tenant id to use to access the KeyVault.
        required: false
      codeSignClientSecret:
        description: The client secret to use to access the KeyVault.
        required: false
      codeSignCertificate:
        description: The name of the certificate to use to code sign the build.
        required: false
      codecovToken:
        required: false

jobs:
  msbuild-build:
    runs-on: ${{ inputs.runs-on }}
    name: ${{ inputs.name }}
    env:
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      # Secrets can't be referenced in conditionals, but environment variables can.
      # https://github.com/github/docs/issues/6861#issuecomment-870757186
      CODECOV_TOKEN: ${{ secrets.codecovToken }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules }}

      - name: Set DOTNET_ROOT
        if: ${{ inputs.dotnet-version }}
        run: |
          echo "DOTNET_INSTALL_DIR=${{ github.workspace }}/.dotnet" >> $GITHUB_ENV
          echo "DOTNET_ROOT=${{ github.workspace }}/.dotnet" >> $GITHUB_ENV

      - name: Setup .NET ${{ inputs.dotnet-version }}
        if: ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Setup Windows SDK ${{ inputs.windows-sdk-version }}
        if: ${{ inputs.windows-sdk-version }}
        shell: pwsh
        run: |
          Write-Host "Downloading Windows SDK installer..."
          Invoke-WebRequest -UseBasicParsing -Uri https://raw.githubusercontent.com/avantipoint/workflow-templates/master/build/Install-WindowsSdkISO.ps1 -OutFile Install-WindowsSdkISO.ps1
          Write-Host "Finished downloading Windows SDK installer."
          "${{ inputs.windows-sdk-version }}".Split(",") | ForEach-Object {
            Write-Host "Installing Windows SDK $($_)"
            .\Install-WindowsSdkISO.ps1 $_
            Write-Host "Finished installing Windows SDK $($_)"
          }

      - name: Set up OpenJDK ${{ inputs.jdk-version }}
        if: ${{ inputs.jdk-version }}
        uses: AdoptOpenJDK/install-jdk@v1
        with:
          version: ${{ inputs.jdk-version }}
          architecture: x64

      - name: Install .NET Workload
        if: ${{ inputs.install-workload }}
        run: dotnet workload install ${{ inputs.install-workload }}

      - name: Run Uno Check
        if: ${{ inputs.uno-check }}
        shell: pwsh
        run: |
          dotnet tool install --global Uno.Check --version ${{ inputs.uno-check-version }}
          if ('${{ inputs.uno-check-manifest }}' -eq '') {
            uno-check -v --ci --non-interactive --fix --verbose ${{ inputs.uno-check-parameters }}
          } else {
            uno-check -v --ci --non-interactive --fix --verbose --manifest ${{ inputs.uno-check-manifest }} ${{ inputs.uno-check-parameters }}
          }

      - name: Download Latest NuGet.exe
        if: ${{ inputs.runs-on }} == windows-latest
        run: curl -L -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: Add NuGet Feed
        if: ${{ inputs.nugetFeedUrl }}
        shell: pwsh
        run: |
          $userName = "${{ secrets.nugetUserName }}"
          $token = "${{ secrets.nugetToken }}"
          if ($userName -eq '' || $token -eq '') {
            nuget sources Add -Source ${{ inputs.nugetFeedUrl }} -Name "CustomFeed"
          } else {
            nuget sources Add -Source ${{ inputs.nugetFeedUrl }} -Name "CustomFeed" -Username $userName -Password $token
          }

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: ${{ inputs.vs-version }}
          vs-prerelease: ${{ inputs.vs-prerelease }}

      - name: Build Packages
        run: msbuild ${{ inputs.solution-path }} /r /p:Configuration=${{ inputs.build-configuration }} ${{ inputs.build-args }}

      - name: Run Tests
        if: ${{ inputs.run-tests }}
        run: dotnet test ${{ inputs.solution-path }} --configuration ${{ inputs.build-configuration }} --logger ${{ inputs.dotnet-test-logger }} --blame-crash --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover --no-build

      - name: Upload Coverage
        if: ${{ env.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.codecovToken }}

      - name: Sign NuGet Packages
        if: ${{ inputs.code-sign }}
        shell: pwsh
        working-directory: ${{ inputs.artifacts-path }}
        run: |
          dotnet tool install --global NuGetKeyVaultSignTool
          $timestampUrl = "${{ secrets.codeSignTimestampUrl }}"
          if ($timestampUrl -eq '') {
            $timestampUrl = 'http://timestamp.digicert.com'
          }
          Get-ChildItem -Recurse | Where-Object { $_.Name.EndsWith('.nupkg') -or $_.Name.EndsWith('.snupkg') } | ForEach-Object {
            NuGetKeyVaultSignTool sign $_.Name `
              --file-digest sha256 `
              --timestamp-rfc3161 $timestampUrl `
              --timestamp-digest sha256 `
              --azure-key-vault-url '${{ secrets.codeSignKeyVault }}' `
              --azure-key-vault-client-id '${{ secrets.codeSignClientId }}' `
              --azure-key-vault-tenant-id '${{ secrets.codeSignTenantId }}' `
              --azure-key-vault-client-secret '${{ secrets.codeSignClientSecret }}' `
              --azure-key-vault-certificate '${{ secrets.codeSignCertificate }}'
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ inputs.artifact-name }}
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifacts-path }}